let currentStep,stepAmount,timerID,direction,appOn=!1,programOn=!1,settingsView=!1,selectedToBeMovedStep=null,isMaxStepMoved=!1,config={maxRevs:2e3,minRevs:800,stepSize:25,minStep:10,maxStep:20,intervalMs:1e3},tempConfig={...config};const saveClicked=()=>(console.log("saveCLicked"),axios({method:"post",url:"parameters/save",data:{config:tempConfig}}).then(e=>{console.log("Save parameters: DONE"),config={...tempConfig},currentStep=0})),cancelClicked=()=>{console.log("cancelClicked"),$("#step-size-input").val(config.stepSize),$("#min-revs-input").val(config.minRevs),$("#max-revs-input").val(config.maxRevs),$("#step-interval-input").val(config.intervalMs),tempConfig={...config}},calibIncrease=()=>{axios({method:"post",url:"speed/increase",data:{stepSize:10,calib:!0}})},calibDecrease=()=>{axios({method:"post",url:"speed/decrease",data:{stepSize:10,calib:!0}})},calibSetMin=()=>{axios({method:"post",url:"calib/setmin",data:{minRevs:config.minRevs}})},calibSetMax=()=>{axios({method:"post",url:"calib/setmax",data:{maxRevs:config.maxRevs}})},customProgramStepTimeChanged=e=>{const t=e.toString();t&&!isNaN(t)&&(tempConfig.intervalMs=Number(t))},stepSizeValueChanged=e=>{const t=e.toString();t&&!isNaN(t)&&(tempConfig.stepSize=Number(t))},minRevsValueChanged=e=>{const t=e.toString();t&&!isNaN(t)&&(tempConfig.minRevs=Number(t))},maxRevsValueChanged=e=>{const t=e.toString();t&&!isNaN(t)&&(tempConfig.maxRevs=Number(t))},onOffButtonClicked=()=>{(appOn=!appOn)?($("#on-off-button")[0].setAttribute("app-on","true"),$("#increase-button").prop("disabled",!1),$("#decrease-button").prop("disabled",!1),$("#start-stop-program").prop("disabled",!1)):($("#on-off-button")[0].removeAttribute("app-on"),$("#increase-button").prop("disabled",!0),$("#decrease-button").prop("disabled",!0),$("#start-stop-program").prop("disabled",!0),axios({method:"post",url:"speed/zero",data:{calib:!1}}).then(e=>{currentStep=0,fillMeterBar()}))},startStopButtonClicked=()=>{(programOn=!programOn)?($("#start-stop-program")[0].setAttribute("program-on","true"),config.intervalMs&&(direction=currentStep<config.maxStep?1:-1,timerID=setInterval(()=>{currentStep<=config.minStep&&(direction=1),currentStep>=config.maxStep-1&&(direction=-1),direction>0?(console.log("increase"),increaseButtonClicked()):(console.log("decrease"),decreaseButtonClicked())},config.intervalMs))):($("#start-stop-program")[0].removeAttribute("program-on"),timerID&&clearInterval(timerID))},settingsButtonClicked=()=>{console.log("Settings button clicked"),(settingsView=!settingsView)?($("#settings-mode-content")[0].style.display="flex",$("#normal-mode-content")[0].style.display="none"):($("#settings-mode-content")[0].style.display="none",$("#normal-mode-content")[0].style.display="flex",loadParameters().then(()=>{$("#step-size-input").val(config.stepSize),$("#min-revs-input").val(config.minRevs),$("#max-revs-input").val(config.maxRevs),$("#step-interval-input").val(config.intervalMs),fillMeterBar()}),$("#increase-button").prop("disabled",!0),$("#decrease-button").prop("disabled",!0),$("#start-stop-program").prop("disabled",!0))},increaseButtonClicked=()=>{if(appOn)if((currentStep+=1)>stepAmount)currentStep=stepAmount;else{const e=$(`#meter-block-${currentStep}`);e&&e[0]&&(e[0].style.backgroundColor="green"),axios({method:"post",url:"speed/increase",data:{stepSize:config.stepSize,calib:!1}})}},decreaseButtonClicked=()=>{if(appOn){if(currentStep>0){const e=$(`#meter-block-${currentStep}`);e&&e[0]&&(e[0].style.backgroundColor="lightgray",axios({method:"post",url:"speed/decrease",data:{stepSize:config.stepSize,calib:!1}})),currentStep-=1}currentStep<0&&(currentStep=0)}},meterBlockClicked=e=>{if(e.target&&e.target.id&&e.target.dataset.revs){const t=Number(e.target.id.replace("meter-block-",""));selectedToBeMovedStep||t!==config.maxStep&&t!==config.minStep?selectedToBeMovedStep&&t!==config.minStep&&t!==config.maxStep&&($(`#meter-block-${selectedToBeMovedStep}`)[0].classList.remove("toBeMovedBlock"),$(`#meter-block-${selectedToBeMovedStep}`)[0].classList.remove("selectedBlock"),$(`#${e.target.id}`)[0].classList.add("selectedBlock"),isMaxStepMoved?t>config.minStep?config.maxStep=t:(config.maxStep=config.minStep,config.minStep=t):t<config.maxStep?config.minStep=t:(config.minStep=config.maxStep,config.maxStep=t),selectedToBeMovedStep=null):($(`#${e.target.id}`)[0].classList.add("toBeMovedBlock"),isMaxStepMoved=(selectedToBeMovedStep=t)>config.minStep)}},fillMeterBar=()=>{const e=$("#meter-bar");if(e.empty(),e){e.empty(),stepAmount=Math.ceil((config.maxRevs-config.minRevs)/config.stepSize)+1;const t=(e[0].offsetHeight-4)/stepAmount-2;console.log("meterBlockHeight :",t);for(let o=1;o<=stepAmount;o++){const i=document.createElement("LI");i.classList.add("meterBlock"),i.style.height=`${t}px`,i.id=`meter-block-${o}`,i.dataset.revs=`${config.minRevs+(o-1)*config.stepSize}`,i.onclick=meterBlockClicked,console.log(currentStep),o<=currentStep&&i.classList.add("greenBlock"),o!==config.minStep&&o!==config.maxStep||i.classList.add("selectedBlock"),e.append(i)}}},loadParameters=async()=>axios({method:"get",url:"parameters/load"}).then(e=>(console.log("load parameters: get : ",e.data),e.data&&e.data.boat&&(config={...e.data.boat},currentStep=e.data.currentStep||0,console.log("Store parameters to globals : currentStep=",currentStep)),new Promise(e=>e(!0))));setTimeout(()=>{loadParameters().then(()=>{$("#step-size-input").val(config.stepSize),$("#min-revs-input").val(config.minRevs),$("#max-revs-input").val(config.maxRevs),$("#step-interval-input").val(config.intervalMs),fillMeterBar()}),$("#increase-button").prop("disabled",!0),$("#decrease-button").prop("disabled",!0),$("#start-stop-program").prop("disabled",!0)},100);
//# sourceMappingURL=index.min.js.map